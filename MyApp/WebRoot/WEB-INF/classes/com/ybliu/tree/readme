
		String rid=null;
		if(session!=null)
		{
			Object orid=(Object)session.get("groleid");
			rid=orid.toString();
		}else
		{
			Object orid=this.getSession().get("groleid");
			rid=orid.toString();
		}
		if(userQueryCriteria==null)
			userQueryCriteria=new UserQueryCriteria();
		userQueryCriteria.setRoleId(rid.equals("0")?null:rid);
		/*List<YingFunctions> yfunction = super.getQueryManager().queryForList(SqlConstants.GET_YING_ROLE_FUNCTIONS, userQueryCriteria);
	    int len=yfunction.size();
	    int level=1;
	    StringBuffer sb=new StringBuffer();
	    sb.append("<script type=\"text/javascript\">");
		sb.append("d = new yTree('d');");
		sb.append("d.add(0,-1,'');");
	    for(YingFunctions yfs:yfunction)
	    {
	    	sb.append("d.add("+yfs.getFunctionId()+","+yfs.getParentFuncId()+","+yfs.getFunctionName()+","+yfs.getAssemblyName()+");");
	    }
	    sb.append("document.write(d);");
	    sb.append("</script>");*/
		
		List dataList = super.getQueryManager().queryForList(rid.equals("0")?SqlConstants.GET_YING_ROLE_FUNCTIONS_LIST_ROOT:SqlConstants.GET_YING_ROLE_FUNCTIONS_LIST, userQueryCriteria);
		// 读取层次数据结果集列表 
		 // List dataList = VirtualDataGenerator.getVirtualResult();  
		  
		  // 节点列表（散列表，用于临时存储节点对象）
		  HashMap nodeList = new HashMap();
		  Node nd=new Node();
		  nd.setId("0");
		  nd.setText("root");
		  nd.setOrdering("1");
		  nodeList.put(nd.id,nd);
		  
		  // 根节点
		  Node root = null;
		  // 根据结果集构造节点列表（存入散列表）
		  for (Iterator it = dataList.iterator(); it.hasNext();) {
		   Map dataRecord = (Map) it.next();
		   Node node = new Node();
		   Object obj=(Object) dataRecord.get("id");
		   if(obj!=null)
			   node.id = obj+"";
		   else
			   node.id=null;
		   node.text = (String) dataRecord.get("text");
		   node.parentId =dataRecord.get("parentId")!=null?(Long)dataRecord.get("parentId")+"":null;
		   node.url=(String)dataRecord.get("url");
		   node.img=(String)dataRecord.get("img");
		   node.ordering = dataRecord.get("ordering").toString();

		   nodeList.put(node.id, node);
		  }
		  // 构造无序的多叉树
		  Set entrySet = nodeList.entrySet();
		  for (Iterator it = entrySet.iterator(); it.hasNext();) {
		   Node node = (Node) ((Map.Entry) it.next()).getValue();
		   if (node.parentId == null || node.parentId.equals("")) {
		    root = node;
		   } else {
		    ((Node) nodeList.get(node.parentId)).addChild(node);
		   }
		  }
		  // 输出无序的树形菜单的JSON字符串
		  System.out.println(root.toString());   
		  // 对多叉树进行横向排序
		  root.sortChildren();
		  // 输出有序的树形菜单的JSON字符串
		 // System.out.println(root.toString()); 
	    HttpServletRequest request = ServletActionContext.getRequest(); 
		
	    ytreelist=root.toString();
	   // request.setAttribute("ytreelist", root.toString());